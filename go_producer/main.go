// Code generated by hertz generator.

package main

import (
	"lintang/go_producer/biz/dal"
	kakfabroker "lintang/go_producer/biz/dal/kafkabroker"
	"lintang/go_producer/biz/dal/rabbitmq"
	"lintang/go_producer/biz/router"
	"lintang/go_producer/biz/service"
	"lintang/go_producer/config"
	"lintang/go_producer/pkg"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
)

func main() {
	h := server.Default(server.WithHostPorts("127.0.0.1:8998"))
	cfg, err := config.NewConfig()
	if err != nil {
		hlog.Fatalf("Config error: %s", err)
	}

	logsCores := pkg.InitZapLogger(cfg)
	defer logsCores.Sync()
	hlog.SetLogger(logsCores)

	if err != nil {
		hlog.Fatalf("Config error: %s", err)
	}

	// rabbitmq
	rmq := dal.InitRmq(cfg)
	producerMQ := rabbitmq.NewNotificationMQ(rmq)
	pSvc := service.NewRabbitMQProducerService(producerMQ)

	router.ProducerRouter(h, pSvc) // router buat rabbitmq producer

	// kafka
	kafkaProducer := kakfabroker.NewKafkaProducer(cfg)

	// kafka producer service
	kafkaService := service.NewKafkaProducerService(kafkaProducer)

	router.KafkaProducerRouter(h, kafkaService) // router buat kafka producer

	// var callback []route.CtxCallback
	// callback = append(callback, rmq.Close, kafkaProducer.Close)
	// h.Engine.OnShutdown = append(h.Engine.OnShutdown, callback...) // graceful shutdown

	//

	h.Spin()
}
