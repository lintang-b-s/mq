// Code generated by hertz generator.

package main

import (
	"lintang/go_consumer/biz/dal"
	"lintang/go_consumer/biz/dal/kafka"
	"lintang/go_consumer/biz/dal/rabbitmq"
	"lintang/go_consumer/config"
	"lintang/go_consumer/pkg"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"go.uber.org/zap"
)

func main() {
	h := server.Default(server.WithHostPorts("127.0.0.1:8991"))
	cfg, err := config.NewConfig()
	if err != nil {
		hlog.Fatalf("Config error: %s", err)
	}

	logsCores := pkg.InitZapLogger(cfg)
	defer logsCores.Sync()
	hlog.SetLogger(logsCores)

	if err != nil {
		hlog.Fatalf("Config error: %s", err)
	}

	// init rabbitmq connection
	rmq := dal.InitRmq(cfg)

	// consumer rabbitmq
	rmqListener := rabbitmq.NewNotificationListener(rmq, make(chan struct{}))

	// kafka consumer
	kafkaConsumer := kafka.NewKafkaConsumerGroup(cfg) // bikin kafka consumer group
	kafkaConsumer.ReadNotificationMessage()           // read message from kafka

	// var callback []route.CtxCallback
	// callback = append(callback, rmq.Close, kafkaConsumer.Close)
	// h.Engine.OnShutdown = append(h.Engine.OnShutdown, callback...) // graceful shutdown

	go func() {
		if err := rmqListener.ListenAndServe(); err != nil {
			zap.L().Fatal("rmqListener.ListenAndServe()", zap.Error(err))
		}
	}()

	h.Spin()
}
